//+------------------------------------------------------------------+
//| OpenTestTrades2.mq4                                              |
//| Enhanced script to open targeted test trades for EA UI/BE testing|
//+------------------------------------------------------------------+
#property script_show_inputs

input int    Trades_BEGroup           = 2;      // Trades for BE group (same symbol/type)
input int    Trades_BEGroup_Mixed     = 2;      // Trades for mixed profit/loss group (same symbol/type)
input int    Trades_LossGroup         = 2;      // Trades for group starting in loss
input int    Trades_AboveBE           = 2;      // Trades for group clearly in profit above BE
input int    Trades_ExceedLotCount    = 6;      // Trades to exceed MaxTradeCountPerSymbol
input int    Trades_ExceedLotSize     = 2;      // Trades to exceed MaxLotSizePerSymbol
input double Lot_BEGroup              = 0.02;   // Lot size for BE group
input double Lot_MixedGroup           = 0.02;   // Lot size for mixed group
input double Lot_LossGroup            = 0.02;   // Lot for always-loss group
input double Lot_AboveBE              = 0.02;   // Lot for above-BE group
input double Lot_ExceedLotCount       = 0.01;   // Lot for exceeding trade count
input double Lot_ExceedLotSize        = 0.10;   // Lot for exceeding lot size
input int    SL_Pips                  = 30;
input int    TP_Pips                  = 30;
input string BEGroupSymbol            = "EURUSD";
input string MixedGroupSymbol         = "GBPUSD";
input string LossGroupSymbol          = "AUDUSD";
input string AboveBEGroupSymbol       = "USDJPY";
input string ExceedSymbol             = "EURUSD";
input int    MagicNumber              = 55555;
input string TradeComment             = "TestTrade2";
input double PendingOffsetPips        = 20;     // Offset for pending orders

// Helper: Ensure SL/TP meets broker minimum (StopLevel)
double SafeSLTP(double price, double sltp, string symbol, bool isSL) {
   double stopLevelPoints = MarketInfo(symbol, MODE_STOPLEVEL);
   double point = MarketInfo(symbol, MODE_POINT);
   double minDistance = stopLevelPoints * point;
   if (isSL) {
      if (price > sltp && (price - sltp) < minDistance)
         return price - minDistance;
      if (price < sltp && (sltp - price) < minDistance)
         return price + minDistance;
   } else {
      if (price < sltp && (sltp - price) < minDistance)
         return price + minDistance;
      if (price > sltp && (price - sltp) < minDistance)
         return price - minDistance;
   }
   return sltp;
}

void OpenBEGroup() {
   // For BE group test cases (3.1, 3.2, 4.1, 4.3, 6.1, 7.1, 7.2)
   for(int i=0; i<Trades_BEGroup; i++) {
      double price = MarketInfo(BEGroupSymbol, MODE_ASK);
      double sl = SafeSLTP(price, price - SL_Pips * MarketInfo(BEGroupSymbol, MODE_POINT), BEGroupSymbol, true);
      double tp = SafeSLTP(price, price + TP_Pips * MarketInfo(BEGroupSymbol, MODE_POINT), BEGroupSymbol, false);
      int ticket = OrderSend(BEGroupSymbol, OP_BUY, Lot_BEGroup, price, 10, sl, tp, TradeComment+"_BEGroup", MagicNumber+10, 0, clrAqua);
      if(ticket < 0) Print("BE group trade failed: ", GetLastError());
   }
}

void OpenMixedProfitGroup() {
   // For partial close with mixed profit/loss (5.1)
   // Open a buy and a sell on the same symbol, so their profit will differ as price changes.
   for(int i=0; i<Trades_BEGroup_Mixed; i++) {
      double price_buy = MarketInfo(MixedGroupSymbol, MODE_ASK);
      double price_sell = MarketInfo(MixedGroupSymbol, MODE_BID);
      if(i%2==0) {
         int ticketB = OrderSend(MixedGroupSymbol, OP_BUY, Lot_MixedGroup, price_buy, 10, 0, 0, TradeComment+"_MixBuy", MagicNumber+20, 0, clrGreen);
         if(ticketB < 0) Print("Mixed group buy failed: ", GetLastError());
      } else {
         int ticketS = OrderSend(MixedGroupSymbol, OP_SELL, Lot_MixedGroup, price_sell, 10, 0, 0, TradeComment+"_MixSell", MagicNumber+20, 0, clrRed);
         if(ticketS < 0) Print("Mixed group sell failed: ", GetLastError());
      }
   }
}

void OpenLossGroup() {
   // For BE loss case (4.2, 5.2)
   // Open trades likely to go loss (e.g., sell at ask, or buy at bid)
   for(int i=0; i<Trades_LossGroup; i++) {
      double price = MarketInfo(LossGroupSymbol, MODE_ASK);
      int ticket = OrderSend(LossGroupSymbol, OP_BUY, Lot_LossGroup, price, 10, 0, 0, TradeComment+"_Loss", MagicNumber+30, 0, clrOrange);
      if(ticket < 0) Print("Loss group trade failed: ", GetLastError());
   }
}

void OpenAboveBEGroup() {
   // For group that is already in profit above BE (for 4.3, 6.1)
   for(int i=0; i<Trades_AboveBE; i++) {
      double price = MarketInfo(AboveBEGroupSymbol, MODE_ASK);
      int ticket = OrderSend(AboveBEGroupSymbol, OP_BUY, Lot_AboveBE, price, 10, 0, 0, TradeComment+"_AboveBE", MagicNumber+40, 0, clrBlue);
      if(ticket < 0) Print("AboveBE group trade failed: ", GetLastError());
   }
}

void OpenExceedThresholds() {
   // For risk threshold alerts (7.3): exceed MaxTradeCountPerSymbol and MaxLotSizePerSymbol

   // Block 1: Exceed lot count
   for(int j=0; j<Trades_ExceedLotCount; j++) {
      double price1 = MarketInfo(ExceedSymbol, MODE_ASK);
      int ticket1 = OrderSend(ExceedSymbol, OP_BUY, Lot_ExceedLotCount, price1, 10, 0, 0, TradeComment+"_ExceedCount", MagicNumber+50, 0, clrMagenta);
      if(ticket1 < 0) Print("Exceed count trade failed: ", GetLastError());
   }
   // Block 2: Exceed lot size
   for(int k=0; k<Trades_ExceedLotSize; k++) {
      double price2 = MarketInfo(ExceedSymbol, MODE_ASK);
      int ticket2 = OrderSend(ExceedSymbol, OP_BUY, Lot_ExceedLotSize, price2, 10, 0, 0, TradeComment+"_ExceedLot", MagicNumber+51, 0, clrYellow);
      if(ticket2 < 0) Print("Exceed lot trade failed: ", GetLastError());
   }
}

void OnStart()
{
   Print("---- OpenTestTrades2: Creating test data for EA test cases ----");
   OpenBEGroup();
   OpenMixedProfitGroup();
   OpenLossGroup();
   OpenAboveBEGroup();
   OpenExceedThresholds();
   Print("---- Test trades/orders issued. Adjust market/prices as needed for BE/profit/loss scenarios ----");
   Print("Review open trades/orders for EA testing.");
}